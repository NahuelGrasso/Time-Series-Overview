dfts.monthly.High.withouttrend.withoutseasonal <- HoltWinters(dfts.monthly.High, beta=FALSE, gamma=FALSE)
dfts.monthly.High.HoltWinters <- HoltWinters(dfts.monthly.High, beta=0.5)
#Plot HoltWinters
plot(dfts.monthly.High.withtrend.withseasonal.Additive, main = "monthly withtrend withseasonal Additive")
plot(dfts.monthly.High.withtrend.withseasonal.Multiplicative, main = "monthly withtrend withseasonal Multiplicative")
plot(dfts.monthly.High.withtrend.withoutseasonal, main = "monthly withtrend withoutseasonal")
plot(dfts.monthly.High.withouttrend.withoutseasonal, main = "monthly withouttrend withoutseasonal")
plot(dfts.monthly.High.HoltWinters, main = "monthly withtrend beta 0.5")
##Accuracy tables:
###Monthly with trend with seasonal Additive
RESIDUALS <- dfts.monthly.High-dfts.monthly.High.withtrend.withseasonal.Additive$fitted[,1]
BIAS <- sum(RESIDUALS)
TABLE <- accuracy(dfts.monthly.High,dfts.monthly.High.withtrend.withseasonal.Additive$fitted)
MAD <- mean(abs(RESIDUALS))
TR <- BIAS/MAD
knitr::kable(cbind(TABLE,MAD,BIAS,TR))
###Monthly with trend with seasonal Multiplicative
RESIDUALS2 <- dfts.monthly.High-dfts.monthly.High.withtrend.withseasonal.Multiplicative$fitted[,1]
BIAS <- sum(RESIDUALS2)
TABLE <- accuracy(dfts.monthly.High,dfts.monthly.High.withtrend.withseasonal.Multiplicative$fitted)
MAD <- mean(abs(RESIDUALS2))
TR <- BIAS/MAD
knitr::kable(cbind(TABLE,MAD,BIAS,TR))
###Monthly withtrend without seasonal
RESIDUALS3 <- dfts.monthly.High-dfts.monthly.High.withtrend.withoutseasonal$fitted[,1]
BIAS <- sum(RESIDUALS3)
TABLE <- accuracy(dfts.monthly.High,dfts.monthly.High.withtrend.withoutseasonal$fitted)
MAD <- mean(abs(RESIDUALS3))
TR <- BIAS/MAD
knitr::kable(cbind(TABLE,MAD,BIAS,TR))
###Monthly without trend without seasonal
RESIDUALS4 <- dfts.monthly.High-dfts.monthly.High.withouttrend.withoutseasonal$fitted[,1]
BIAS <- sum(RESIDUALS4)
TABLE <- accuracy(dfts.monthly.High,dfts.monthly.High.withouttrend.withoutseasonal$fitted)
MAD <- mean(abs(RESIDUALS4))
TR <- BIAS/MAD
knitr::kable(cbind(TABLE,MAD,BIAS,TR))
###Monthly with trend beta 0.5
RESIDUALS5 <- dfts.monthly.High-dfts.monthly.High.HoltWinters$fitted[,1]
BIAS <- sum(RESIDUALS5)
TABLE <- accuracy(dfts.monthly.High,dfts.monthly.High.HoltWinters$fitted)
MAD <- mean(abs(RESIDUALS5))
TR <- BIAS/MAD
knitr::kable(cbind(TABLE,MAD,BIAS,TR))
##Residual Plots:
hist(RESIDUALS, main = "monthly withtrend withseasonal Additive")
hist(RESIDUALS2, main = "monthly withtrend withseasonal Multiplicative")
hist(RESIDUALS3, main = "monthly withtrend withoutseasonal")
hist(RESIDUALS4, main = "monthly withouttrend withoutseasonal")
hist(RESIDUALS5, main = "monthly withtrend beta 0.5")
#Quarterly Estimation:
##Defining the time series by quarter:
df.quarterly.High <- apply.quarterly(xts(df$High, order.by=df$Date), FUN=mean)
dfts.quarterly.High <- ts(df.quarterly.High,frequency = 4,start=c(2005,1))
##Decomposing the time series to identify the different components:
dfts.quarterly.High.components.Additive <-decompose(dfts.quarterly.High, type = "additive")
dfts.quarterly.High.components.Multiplicative <-decompose(dfts.quarterly.High, type = "multiplicative")
##Plot components:
plot(dfts.quarterly.High.components.Additive)
plot(dfts.quarterly.High.components.Multiplicative)
##Applying HoltWinters model estimation:
dfts.quarterly.High.withtrend.withoutseasonal <- HoltWinters(dfts.quarterly.High, beta=TRUE, gamma=FALSE)
dfts.quarterly.High.withouttrend.withoutseasonal <- HoltWinters(dfts.quarterly.High, beta=FALSE, gamma=FALSE)
dfts.quarterly.High.HoltWinters <- HoltWinters(dfts.quarterly.High, beta=0.5)
##Plot HoltWinters
plot(dfts.quarterly.High.withtrend.withoutseasonal, main = "quarterly withtrend withoutseasonal")
plot(dfts.quarterly.High.withouttrend.withoutseasonal, main = "quarterly withouttrend withoutseasonal")
plot(dfts.quarterly.High.HoltWinters, main = "quarterly withtrend beta 0.5")
##Residual Plots:
hist(RESIDUALS3)
hist(RESIDUALS4)
hist(RESIDUALS5)
##Accuracy tables:
###Quarterly withtrend withoutseasonal
RESIDUALS3 <- dfts.quarterly.High-dfts.quarterly.High.withtrend.withoutseasonal$fitted[,1]
BIAS <- sum(RESIDUALS3)
TABLE <- accuracy(dfts.quarterly.High,dfts.quarterly.High.withtrend.withoutseasonal$fitted)
MAD <- mean(abs(RESIDUALS3))
TR <- BIAS/MAD
knitr::kable(cbind(TABLE,MAD,BIAS,TR))
###Quarterly withouttrend withoutseasonal
RESIDUALS4 <- dfts.quarterly.High-dfts.quarterly.High.withouttrend.withoutseasonal$fitted[,1]
BIAS <- sum(RESIDUALS4)
TABLE <- accuracy(dfts.quarterly.High,dfts.quarterly.High.withouttrend.withoutseasonal$fitted)
MAD <- mean(abs(RESIDUALS4))
TR <- BIAS/MAD
knitr::kable(cbind(TABLE,MAD,BIAS,TR))
###Quarterly withtrend beta 0.5
RESIDUALS5 <- dfts.quarterly.High-dfts.quarterly.High.HoltWinters$fitted[,1]
BIAS <- sum(RESIDUALS5)
TABLE <- accuracy(dfts.quarterly.High,dfts.quarterly.High.HoltWinters$fitted)
MAD <- mean(abs(RESIDUALS5))
TR <- BIAS/MAD
knitr::kable(cbind(TABLE,MAD,BIAS,TR))
#Predictions
##Predictions with best 2 Monthly models
dfts.monthly.High.HoltWinters.prediction <- predict(dfts.monthly.High.HoltWinters,n.ahead=4,level=0.95)
dfts.monthly.High.withtrend.withoutseasonal.prediction <- predict(dfts.monthly.High.withtrend.withoutseasonal,n.ahead=4,level=0.95)
plot(dfts.monthly.High.HoltWinters, dfts.monthly.High.HoltWinters.prediction)
dfts.monthly.High.HoltWinters.prediction
plot(dfts.monthly.High.withtrend.withoutseasonal, dfts.monthly.High.withtrend.withoutseasonal.prediction)
dfts.monthly.High.withtrend.withoutseasonal.prediction
##Predictions with best Quarterly model
dfts.quarterly.High.HoltWinters.prediction <- predict(dfts.quarterly.High.HoltWinters,n.ahead=4,level=0.95)
plot(dfts.quarterly.High.HoltWinters, dfts.quarterly.High.HoltWinters.prediction)
dfts.quarterly.High.HoltWinters.prediction
optimizationFunction<- function(x) {   ## Optimization function for ALPHA, BETA and GAMMA for a specific accuracy value.
a <- HoltWinters(dfts.monthly.High, alpha=x[1], beta=x[2], gamma=x[3],seasonal = "additive")
accuracy(dfts.monthly.High,a$fitted)[x[4]]
}
optimal <-Inf
optimal_alpha <-Inf
optimal_beta <-Inf
optimal_gamma <-Inf
for(i in 1:10){
alpha <- runif(1, 0, 1)
beta <- runif(1, 0, 1)
gamma <- runif(1, 0, 1)
c(alpha,beta,gamma)
optimalLocal <- optim(c(alpha,beta,gamma,3), optimizationFunction,lower = c(0.0000001,0,0,3), upper = c(1,1,1,3))
if(optimalLocal$value<optimal){
optimal_alpha <-optimalLocal$par[1]
optimal_beta <-optimalLocal$par[2]
optimal_gamma <-optimalLocal$par[3]
optimal <- optimalLocal$value
}
}
optimal_alpha
optimal_beta
optimal_gamma
optimal
dfts.monthly.High
optimizationFunction<- function(x) {   ## Optimization function for ALPHA, BETA and GAMMA for a specific accuracy value.
a <- HoltWinters(dfts.monthly.High, alpha=x[1], beta=x[2], gamma=x[3],seasonal = "additive")
#   accuracy(dfts.monthly.High,a$fitted)[x[4]]
accuracy(dfts.monthly.High,a$fitted)[3]
}
optimal <-Inf
optimal_alpha <-Inf
optimal_beta <-Inf
optimal_gamma <-Inf
for(i in 1:10){
alpha <- runif(1, 0, 1)
beta <- runif(1, 0, 1)
gamma <- runif(1, 0, 1)
c(alpha,beta,gamma)
optimalLocal <- optim(c(alpha,beta,gamma), optimizationFunction,lower = c(0.0000001,0,0), upper = c(1,1,1))
if(optimalLocal$value<optimal){
optimal_alpha <-optimalLocal$par[1]
optimal_beta <-optimalLocal$par[2]
optimal_gamma <-optimalLocal$par[3]
optimal <- optimalLocal$value
}
}
optimal_alpha
optimal_beta
optimal_gamma
optimal
optimizationFunction<- function(x) {   ## Optimization function for ALPHA, BETA and GAMMA for a specific accuracy value.
a <- HoltWinters(dfts.monthly.High, alpha=x[1], beta=x[2], gamma=x[3],seasonal = "additive")
accuracy(dfts.monthly.High,a$fitted)[x[4]]
#   accuracy(dfts.monthly.High,a$fitted)[3]
}
optimal <-Inf
optimal_alpha <-Inf
optimal_beta <-Inf
optimal_gamma <-Inf
for(i in 1:10){
alpha <- runif(1, 0, 1)
beta <- runif(1, 0, 1)
gamma <- runif(1, 0, 1)
#   c(alpha,beta,gamma)
#   optimalLocal <- optim(c(alpha,beta,gamma), optimizationFunction,lower = c(0.0000001,0,0), upper = c(1,1,1))
optimalLocal <- optim(c(alpha,beta,gamma,3), optimizationFunction,lower = c(0.0000001,0,0,3), upper = c(1,1,1,3))
if(optimalLocal$value<optimal){
optimal_alpha <-optimalLocal$par[1]
optimal_beta <-optimalLocal$par[2]
optimal_gamma <-optimalLocal$par[3]
optimal <- optimalLocal$value
}
}
optimal_alpha
optimal_beta
optimal_gamma
optimal
optimal <-Inf
optimal_alpha <-Inf
optimal_beta <-Inf
optimal_gamma <-Inf
for(i in 1:10){
alpha <- runif(1, 0, 1)
beta <- runif(1, 0, 1)
gamma <- runif(1, 0, 1)
#   c(alpha,beta,gamma)
#   optimalLocal <- optim(c(alpha,beta,gamma), optimizationFunction,lower = c(0.0000001,0,0), upper = c(1,1,1))
optimalLocal <- optim(c(alpha,beta,gamma,3), optimizationFunction,lower = c(0.0000001,0,0,3), upper = c(1,1,1,3))
if(optimalLocal$value<optimal){
optimal_alpha <-optimalLocal$par[1]
optimal_beta <-optimalLocal$par[2]
optimal_gamma <-optimalLocal$par[3]
optimal <- optimalLocal$value
}
}
optimal_alpha
optimal_beta
optimal_gamma
optimal
optimizationFunction<- function(x) {   ## Optimization function for ALPHA, BETA and GAMMA for a specific accuracy value.
a <- HoltWinters(dfts.monthly.High, alpha=x[1], beta=x[2], gamma=x[3],seasonal = "additive")
#   accuracy(dfts.monthly.High,a$fitted)[x[4]]
accuracy(dfts.monthly.High,a$fitted)[3]
}
optimal <-Inf
optimal_alpha <-Inf
optimal_beta <-Inf
optimal_gamma <-Inf
for(i in 1:10){
alpha <- runif(1, 0, 1)
beta <- runif(1, 0, 1)
gamma <- runif(1, 0, 1)
#   c(alpha,beta,gamma)
optimalLocal <- optim(c(alpha,beta,gamma), optimizationFunction,lower = c(0.0000001,0,0), upper = c(1,1,1))
#   optimalLocal <- optim(c(alpha,beta,gamma,3), optimizationFunction,lower = c(0.0000001,0,0,3), upper = c(1,1,1,3))
if(optimalLocal$value<optimal){
optimal_alpha <-optimalLocal$par[1]
optimal_beta <-optimalLocal$par[2]
optimal_gamma <-optimalLocal$par[3]
optimal <- optimalLocal$value
}
}
optimal_alpha
optimal_beta
optimal_gamma
optimal
optimizationFunction<- function(x) {   ## Optimization function for ALPHA, BETA and GAMMA for a specific accuracy value.
a <- HoltWinters(dfts.monthly.High, alpha=x[1], beta=x[2], gamma=x[3],seasonal = "additive")
#   accuracy(dfts.monthly.High,a$fitted)[x[4]]
accuracy(dfts.monthly.High,a$fitted)[3]
}
optimal <-Inf
optimal_alpha <-Inf
optimal_beta <-Inf
optimal_gamma <-Inf
for(i in 1:10){
alpha <- runif(1, 0, 1)
beta <- runif(1, 0, 1)
gamma <- runif(1, 0, 1)
#   c(alpha,beta,gamma)
optimalLocal <- optim(c(alpha,beta,gamma), optimizationFunction,lower = c(0.0000001,0,0), upper = c(1,1,1))
#   optimalLocal <- optim(c(alpha,beta,gamma,3), optimizationFunction,lower = c(0.0000001,0,0,3), upper = c(1,1,1,3))
if(optimalLocal$value<optimal){
optimal_alpha <-optimalLocal$par[1]
optimal_beta <-optimalLocal$par[2]
optimal_gamma <-optimalLocal$par[3]
optimal <- optimalLocal$value
}
}
optimal_alpha
optimal_beta
optimal_gamma
optimal
c(optimal_alpha,optimal_beta,optimal_gamma,optimal)
prueba  <- c(optimal_alpha,optimal_beta,optimal_gamma,optimal)
prueba
knitr::kable(prueba)
colnames(prueba)
colnames(prueba) <- c("optimal alpha","optimal beta","optimal gamma","optimal")
prueba
colnames(prueba) <- c("optimal alpha")
?colnames
colnames(prueba)[1] <- c("optimal alpha")
colnames(prueba)[1] <- c("optimal alpha","optimal beta","optimal gamma","optimal")
colnames(prueba)[1:4] <- c("optimal alpha","optimal beta","optimal gamma","optimal")
colnames(prueba) <- c("optimal alpha","optimal beta","optimal gamma","optimal")
prueba  <- c(optimal_alpha,optimal_beta,optimal_gamma,optimal)
prueba
colnames(prueba)[1] <- c("optimal alpha","optimal beta","optimal gamma","optimal")
colnames(prueba)[1] <- c("optimal alpha")
colnames(prueba) <- c("optimal alpha")
prueba  <- cbind(optimal_alpha,optimal_beta,optimal_gamma,optimal)
colnames(prueba) <- c("optimal alpha","optimal beta","optimal gamma","optimal")
prueba
shiny::runApp()
shiny::runApp()
optimalValue()
cbind(optimal_alpha,optimal_beta,optimal_gamma,optimal)
optimal <-Inf
optimal_alpha <-Inf
optimal_beta <-Inf
optimal_gamma <-Inf
for(i in 1:10){
alpha <- runif(1, 0, 1)
beta <- runif(1, 0, 1)
gamma <- runif(1, 0, 1)
result = tryCatch({
optimalLocal <- optim(c(alpha,beta,gamma), optimizationFunction,lower = c(0.0000001,0,0), upper = c(1,1,1))
}, warning , error = function(e) {
"error"
})
#   optimalLocal <- optim(c(alpha,beta,gamma), optimizationFunction,lower = c(0.0000001,0,0), upper = c(1,1,1))
if(optimalLocal$value<optimal){
optimal_alpha <-optimalLocal$par[1]
optimal_beta <-optimalLocal$par[2]
optimal_gamma <-optimalLocal$par[3]
optimal <- optimalLocal$value
}
}
optimal <-Inf
optimal_alpha <-Inf
optimal_beta <-Inf
optimal_gamma <-Inf
for(i in 1:10){
alpha <- runif(1, 0, 1)
beta <- runif(1, 0, 1)
gamma <- runif(1, 0, 1)
#   result = tryCatch({
#     optimalLocal <- optim(c(alpha,beta,gamma), optimizationFunction,lower = c(0.0000001,0,0), upper = c(1,1,1))
#   }, warning , error = function(e) {
#     "error"
#   })
optimalLocal <- optim(c(alpha,beta,gamma), optimizationFunction,lower = c(0.0000001,0,0), upper = c(1,1,1))
if(optimalLocal$value<optimal){
optimal_alpha <-optimalLocal$par[1]
optimal_beta <-optimalLocal$par[2]
optimal_gamma <-optimalLocal$par[3]
optimal <- optimalLocal$value
}
}
optimal <-Inf
optimal_alpha <-Inf
optimal_beta <-Inf
optimal_gamma <-Inf
for(i in 1:10){
alpha <- runif(1, 0, 1)
beta <- runif(1, 0, 1)
gamma <- runif(1, 0, 1)
#   result = tryCatch({
#     optimalLocal <- optim(c(alpha,beta,gamma), optimizationFunction,lower = c(0.0000001,0,0), upper = c(1,1,1))
#   }, warning , error = function(e) {
#     "error"
#   })
optimalLocal <- suppressWarnings(optim(c(alpha,beta,gamma), optimizationFunction,lower = c(0.0000001,0,0), upper = c(1,1,1)))
if(optimalLocal$value<optimal){
optimal_alpha <-optimalLocal$par[1]
optimal_beta <-optimalLocal$par[2]
optimal_gamma <-optimalLocal$par[3]
optimal <- optimalLocal$value
}
}
shiny::runApp()
shiny::runApp()
TABLE
TABLE[3]
TABLE[2]
shiny::runApp()
??dbGetQuery()
reviews <- read.csv("E:/R training betina/reviews2011-200.csv", stringsAsFactors = FALSE)
lengths <- sapply(reviews$text, nchar)
summary(lengths)
par(mfrow = c(1, 2))
hist(lengths)
hist(log(lengths))
library("textcat")
languages <- textcat(reviews$text)
table(languages)
reviews
str(reviews)
languages
??parallel
languages <- mclapply( textcat(reviews$text))
library("parallel")
languages <- mclapply( textcat(reviews$text))
?mclapply
languages <- mcmapply( textcat(reviews$text))
languages <- mapply( textcat(reviews$text))
workerFunc <- function(n) { return(textcat(reviews$text)) }
values <- 1:100
res <- mclapply(values, workerFunc, mc.cores = 8)
res <- mclapply(values, workerFunc)
func <- function(n) { return(textcat(reviews$text)) }
values <- 1:100
res <- mclapply(values, func)
?mclapply
func <- function() { return(textcat(reviews$text)) }
values <- 1
res <- mclapply(values, func)
func <- function() { return(textcat(reviews$text)) }
values <- 1
res <- mclapply(func)
func <- function(n) { return(textcat(reviews$text)) }
values <- as.list(1)
res <- mclapply(values, func)
res
func <- function(n) { return(textcat(reviews$text)) }
values <- as.list(1)
res <- mclapply(values, func, mc.cores = 8)
?gsub
shiny::runApp()
shiny::runApp()
shiny::runApp()
input$measurement2Optimize
??as.int
shiny::runApp()
??elseif
??else
??if
?accuracy
accuracy(dfts.monthly.High,a$fitted)[3]
a <- HoltWinters(dfts.monthly.High, alpha=1, beta=0, gamma=0,seasonal = "additive")
accuracy(dfts.monthly.High,a$fitted)[3]
accuracy(dfts.monthly.High,a$fitted,test=3)
accuracy(dfts.monthly.High,a$fitted)
data <- window(htseg1, start = 1992, end = 1999)
test <- window(htseg1, start = 2000, end = 2001)
forecast <- forecast(data, h = 2, method = "bu")
accuracy.gts(f = forecast, x = test)
?accuracy.gts
??accuracy.gts
??accuracy.hts
install.packages("hts")
library("hts", lib.loc="~/R/win-library/3.1")
data <- window(htseg1, start = 1992, end = 1999)
test <- window(htseg1, start = 2000, end = 2001)
forecast <- forecast(data, h = 2, method = "bu")
accuracy.gts(f = forecast, x = test)
accuracy.hts(f = forecast, x = test)
accuracy.hts(f = forecast, x = test)
??accuracy
accuracy.gts(f = forecast, x = test)
accuracy.gts(f = forecast)
data <- window(htseg2, start = 1992, end = 2002)
test <- window(htseg2, start = 2003)
fcasts <- forecast(data, h = 5, method = "bu")
accuracy.gts(fcasts, test)
accuracy.gts(fcasts, test, levels = 1)
accuracy(dfts.monthly.High,a$fitted)
accuracy.gts(dfts.monthly.High,a$fitted)
shiny::runApp()
abs(0.94)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?radioButtons
shiny::runApp()
?fluidRow
shiny::runApp()
??ROW
?shiny
shiny::runApp()
?radioButtons
shiny::runApp()
shiny::runApp()
?column
shiny::runApp()
shiny::runApp()
shiny::runApp()
?column
shiny::runApp()
shiny::runApp()
?HoltWinters
a <- HoltWinters(dfts.monthly.High, alpha=TRUE, beta=TRUE, gamma=TRUE,seasonal = "additive",optim.start = c(alpha = 0.3, beta = 0.1, gamma = 0.1))
A
a
b <- HoltWinters(dfts.monthly.High, alpha=TRUE, beta=TRUE, gamma=TRUE,seasonal = "additive")
b
a <- HoltWinters(dfts.monthly.High, alpha=0.1, beta=0.1, gamma=0.1,seasonal = "additive",optim.start = c(alpha = 0.3, beta = 0.1, gamma = 0.1))
a
a <- optim(HoltWinters(dfts.monthly.High, alpha=TRUE, beta=TRUE, gamma=TRUE,seasonal = "additive",optim.start = c(alpha = 0.3, beta = 0.1, gamma = 0.1)))
shiny::runApp()
shiny::runApp()
?radioButtons
shiny::runApp()
shiny::runApp()
shiny::runApp()
?sliderInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?trim
??trim
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
optimalValue()
optimalValue()[1]
optimalValue()[2]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
colnames(optimalValue())
colnames(optimalValue()) <- c("optimal alpha","optimal beta","optimal gamma","optimal")
colnames(optimalValue()[1,]) <- c("optimal alpha","optimal beta","optimal gamma","optimal")
colnames(optimalValue()[1]) <- c("optimal alpha","optimal beta","optimal gamma","optimal")
colnames(optimalValue())[1] <- c("optimal alpha","optimal beta","optimal gamma","optimal")
colnames(optimalValue())[1]
colnames(optimalValue())[1,]
colnames(optimalValue())[1:4]
colnames(optimalValue())[1:4] <- c("optimal alpha","optimal beta","optimal gamma","optimal")
names(optimalValue())
c("optimal alpha","optimal beta","optimal gamma","optimal")
colnames(optimalValue())[1] <- "optimal alpha"
colnames(optimalValue())[1]
?COLNAMES
?colnames
